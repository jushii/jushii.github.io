[{"content":"Introduction In this post I\u0026rsquo;m going through steps to implement an asynchronous finite-state machine (FSM) in Unity, using async/await library UniTask. In the end you\u0026rsquo;ll have a nice modular state machine with all the usual stuff you would expect to find in a FMS. We\u0026rsquo;ll also take a look on how we can run update loops independently of monobehaviours / gameobjects.\nYou can follow along or hop directly to my GitHub to explore the repository which contains the full project.\nRequirements  Unity 2020.2+ UniTask  I recommend installing UniTask via git URL using Unity\u0026rsquo;s package manager.\nStates Alright, let\u0026rsquo;s start with the states. We create an interface IState and three abstract classes: State, State\u0026lt;T\u0026gt; and Options. State and State\u0026lt;T\u0026gt; are the base classes for all state implementations and Options can be used as a container for custom properties when transitioning to a new state.\npublic interface IState { } public abstract class State : State\u0026lt;Options\u0026gt; { }  public abstract class State\u0026lt;T\u0026gt; : IState where T : Options { } public abstract class Options { } The IState interface contains the blueprint of our state. States know which state machine they belong to and they\u0026rsquo;ll use that reference to request state transitions. The OnEnter and OnExit methods will both return UniTask struct which makes them awaitable.\nThe SetOptions method will be called each time we do a state transition. The state machine supports states with and without options.\nTo keep things simple we add in only one update method: OnUpdate. Later I\u0026rsquo;ll introduce you to the true power ðŸ˜± of UniTask and show how easily you can hook in to different timings in Unity\u0026rsquo;s player loop. You can even inject your own player loop timings to the state machine.\nusing Cysharp.Threading.Tasks;  public interface IState {  StateMachine StateMachine { get; set; }  UniTask OnEnter();  UniTask OnExit();  void SetOptions(Options options);  void OnUpdate(); } Next, let\u0026rsquo;s implement the members of IState to the State\u0026lt;T\u0026gt; class. If you\u0026rsquo;re wondering about await UniTask.Yield(), it\u0026rsquo;s the UniTask\u0026rsquo;s replacement for yield return null. We\u0026rsquo;ll make the methods virtual so our derived states can override only the methods they need.\nusing Cysharp.Threading.Tasks;  public abstract class State : State\u0026lt;Options\u0026gt; { }  public abstract class State\u0026lt;T\u0026gt; : IState where T : Options {  public T Options { get; private set; }   public virtual async UniTask OnEnter()  {  await UniTask.Yield();  }   public virtual async UniTask OnExit()  {  await UniTask.Yield();  }   public void SetOptions(Options options)  {  if (options is T stateOptions)  {  Options = stateOptions;  }  }   public virtual void OnUpdate()  {  } } Transitions For handling state transitions we\u0026rsquo;ll create two classes: Transition and Transition\u0026lt;T\u0026gt;.\npublic class Transition : Transition\u0026lt;Options\u0026gt; { }  public abstract class Transition\u0026lt;T\u0026gt; where T : Options { } A transition needs the state Type so we know to which state we want to transition in to. We can also provide Options which can be used for setting up state properties before the state\u0026rsquo;s OnEnter() method is called.\nusing System;  public class Transition : Transition\u0026lt;Options\u0026gt; {  public Transition(Type type, Options options) : base(type, options)  {  } }  public abstract class Transition\u0026lt;T\u0026gt; where T : Options {  public Type Type { get; }  public T Options { get; }   protected Transition(Type type, T options)  {  Type = type;  Options = options;  } } Implementing the state machine Now let\u0026rsquo;s create the StateMachine class and add in some members.\nusing System; using System.Collections.Generic; using Cysharp.Threading.Tasks;  public class StateMachine {  private IState _currentState;  private IState _previousState;  private readonly Dictionary\u0026lt;Type, IState\u0026gt; _states = new();  private readonly Queue\u0026lt;Transition\u0026gt; _pendingTransitions = new(); } We create a dictionary to keep track of registered states. If you dislike using Type as the dictionary key, you could as well use a string or an enum of your choice. We\u0026rsquo;ll also create a queue for keeping track of the requested state transitions.\nNow it\u0026rsquo;s time to add in some methods. First add in a method for registering new states.\npublic void RegisterState(IState state) {  state.StateMachine = this;   _states.Add(state.GetType(), state); } We create two methods for requesting transitions. When a transition is requested it will added into a queue. The queue will be processed in our state machine\u0026rsquo;s update loop.\npublic void RequestTransition(Type stateType) {  _pendingTransitions.Enqueue(new Transition(stateType, null)); }  public void RequestTransition\u0026lt;T\u0026gt;(Type stateType, T options) where T : Options {  _pendingTransitions.Enqueue(new Transition(stateType, options)); } The ChangeTo method will be responsible of handling a transition. We\u0026rsquo;ll again return a UniTask struct so we can await for it\u0026rsquo;s completion.\nprivate async UniTask ChangeTo\u0026lt;T\u0026gt;(Type stateType, T options) where T : Options { } We\u0026rsquo;ll implement a typical FSM-style transition where we first exit the current state (if any) and then enter the next state. Keeping track of the current state as we do this. You\u0026rsquo;ll probably want to include better validation for certain things. For now let\u0026rsquo;s just throw an exception if we try to transition to a state which is not registered to our state machine.\nprivate async UniTask ChangeTo\u0026lt;T\u0026gt;(Type stateType, T options) where T : Options {  if (_currentState != null)  {  _previousState = _currentState;  await _previousState.OnExit();  _currentState = null;  }   if (_states.TryGetValue(stateType, out IState nextState))  {  nextState.SetOptions(options);  _currentState = nextState;  await nextState.OnEnter();  }  else  {  throw new Exception($\u0026#34;State: {stateType.Name} is not registered to state machine.\u0026#34;);  } } The async update loop This is where things get somewhat interesting. Async enumerables is a C# 8.0 feature which, using UniTask, allows us to use a new update notation that lets us to inject our code directly into Unity\u0026rsquo;s PlayerLoop, breaking us free from the shackles of MonoBehaviour.\nprivate async void Update() {  await foreach (var _ in UniTaskAsyncEnumerable.EveryUpdate())  {  } } Using UniTaskAsyncEnumerable we can emulate the Update() method of the MonoBehaviour component in a pure C# class. This is very powerful and useful for many other things besides this state machine. You can read more about async enumerables in the context of Unity and UniTask in the UniTask repository.\nBy default EveryUpdate uses PlayerLoopTiming.Update but you can easily change it to something else (for example to PlayerLoopTiming.FixedUpdate). For this example we\u0026rsquo;re only going to implement a standard Update loop.\nEverything looks good so far, but before we continue with the update loop let\u0026rsquo;s discuss how we can actually start and stop the update. Let\u0026rsquo;s create methods called Run() and Stop().\npublic void Run() { }  public void Stop() { } To stop the state machine from running we need a CancellationToken. So let\u0026rsquo;s add in a field for cancellation token source to our state machine class. We provide this token to the UniTaskAsyncEnumerable in our update loop. The token is used to request the cancellation of the enumerator.\nusing System; using System.Collections.Generic; using System.Threading; using Cysharp.Threading.Tasks; using Cysharp.Threading.Tasks.Linq;  public class StateMachine {  private IState _currentState;  private IState _previousState;  private readonly Dictionary\u0026lt;Type, IState\u0026gt; _states = new();  private readonly Queue\u0026lt;Transition\u0026gt; _pendingTransitions = new();  private CancellationTokenSource _cancellationTokenSource;  ... When we call Run to start the state machine we create a new CancellationTokenSource and fire up our async Update() method. To actually use the token we have to provide it using the WithCancellation method.\npublic void Run() {  _cancellationTokenSource = new();  Update(); } private async void Update() {  await foreach (var _ in UniTaskAsyncEnumerable  .EveryUpdate()  .WithCancellation(_cancellationToken.Token))  {  } } To stop the state machine from running we call Cancel on the cancellation token source to request a cancellation of the enumerator. We will also dispose the cancellation token source.\npublic void Stop() {  _cancellationTokenSource.Cancel();  _cancellationTokenSource.Dispose(); } Now the only things remaining are to actually process the transition queue and calling the OnUpdate() method of the current state.\nprivate async void Update() {  await foreach (var _ in UniTaskAsyncEnumerable  .EveryUpdate()  .WithCancellation(_cancellationToken.Token))  {  while (_pendingTransitions.Count \u0026gt; 0)  {  var transition = _pendingTransitions.Dequeue();  await ChangeTo(transition.Type, transition.Options);  }   _currentState?.OnUpdate();  } } Examples Let\u0026rsquo;s put the state machine to test by implementing a very basic example. We will create a state machine that has two states and we\u0026rsquo;ll also test out a transition between those states. In this example our state machine is running independently of MonoBehaviour. You can of course have the state machine be a member of a class that is derived from monobehaviour or use it in any other way you like.\nCreate the following classes: Example, ExampleState, ExampleStateWithOptions and ExampleStateOptions.\nExampleState is a basic state with no options. We\u0026rsquo;ll request a transition after a 2 second delay. You\u0026rsquo;ll notice that OnUpdate never gets called because we request the transition already inside the OnEnter method.\nusing Cysharp.Threading.Tasks; using UnityEngine;  public class ExampleState : State {  public override async UniTask OnEnter()  {  Debug.Log(\u0026#34;Entering ExampleState! Waiting 2 seconds before changing state.\u0026#34;);   await UniTask.Delay(2000);   var options = new ExampleStateOptions  {  text = \u0026#34;Hello world!\u0026#34;  };   StateMachine.RequestTransition(typeof(ExampleStateWithOptions), options);  }   public override async UniTask OnExit()  {  Debug.Log(\u0026#34;Exiting ExampleState!\u0026#34;);   await UniTask.Yield();  }   public override void OnUpdate()  {  // This is never called because we request a transition in OnEnter.   Debug.Log(\u0026#34;Calling OnUpdate in ExampleState!\u0026#34;);  } } ExampleStateWithOptions uses a custom options container. You\u0026rsquo;ll notice that the options are already initialized when we enter the OnEnter method. Options are a great way for some state-specific initialization which you might want to run before the OnUpdate method is called.\nusing Cysharp.Threading.Tasks; using UnityEngine;  public class ExampleStateOptions : Options {  public string text; }  public class ExampleStateWithOptions : State\u0026lt;ExampleStateOptions\u0026gt; {  public override async UniTask OnEnter()  {  Debug.Log($\u0026#34;Entering ExampleStateWithOptions. Here\u0026#39;s our options text: {Options.text}\u0026#34;);   await UniTask.Yield();  }   public override void OnUpdate()  {  Debug.Log($\u0026#34;realTimeSinceStartup: {Time.realtimeSinceStartup}, frameCount:{Time.frameCount}\u0026#34;);  } } In Example class we\u0026rsquo;ll create a new state machine, create and register 2 states, request a transition to the initial state and call Run to start the state machine.\nusing UnityEngine;  public static class Example {  private static StateMachine _stateMachine; [RuntimeInitializeOnLoadMethod]  private static void Initialize()  {  _stateMachine = new StateMachine();  _stateMachine.RegisterState(new ExampleState());  _stateMachine.RegisterState(new ExampleStateWithOptions());  _stateMachine.RequestTransition(typeof(ExampleState));  _stateMachine.Run();  } } Now, if you hit play in Unity and take a look at the console, you should see the state machine in action!\n","permalink":"https://www.jussituomi.com/posts/async-fsm-unitask/","summary":"Introduction In this post I\u0026rsquo;m going through steps to implement an asynchronous finite-state machine (FSM) in Unity, using async/await library UniTask. In the end you\u0026rsquo;ll have a nice modular state machine with all the usual stuff you would expect to find in a FMS. We\u0026rsquo;ll also take a look on how we can run update loops independently of monobehaviours / gameobjects.\nYou can follow along or hop directly to my GitHub to explore the repository which contains the full project.","title":"Async FSM using UniTask"}]